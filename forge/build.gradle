plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "grapheneui.mixins.json"
    }
    runs {
        client {
            client()
            runDir("../run")
        }
        server {
            server()
            runDir("../run")
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}
configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

def addModrinthMod(id, ver) {
    dependencies { modImplementation("maven.modrinth:${id}:${ver}-forge,${rootProject.minecraft_version}") }
}

def addModLib(name_) {
    println("mod ../libs/" + name_ + ".jar")
    dependencies {
        modImplementation(files("../libs/" + name_ + ".jar"))
    }
}

def addNoModLib(name_) {
    println("../libs/" + name_ + ".jar")
    dependencies {
        implementation(forgeRuntimeLibrary(files("../libs/" + name_ + ".jar")))
    }
}

dependencies {
    forge "net.minecraftforge:forge:$versionConfig.common.minecraftVersion-$versionConfig.forge.loaderVersion"
    if (((String) (versionConfig.common.architecturyApiVersion)).startsWith("1.")) {
        modImplementation "me.shedaniel:architectury-forge:$versionConfig.common.architecturyApiVersion"
    } else {
        modImplementation "dev.architectury:architectury-forge:$versionConfig.common.architecturyApiVersion"
    }
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionForge"))
    for (lib in versionConfig.forge.dependencies.modrinth) {
        addModrinthMod(lib.name, lib.version)
    }
    for (lib in versionConfig.forge.dependencies.local) {
        if (lib.isMod) {
            addModLib(lib.name)
        } else {
            addNoModLib(lib.name)
        }
    }
    if (((String) (versionConfig.common.architecturyApiVersion)).startsWith("1.")) {
        modImplementation "me.shedaniel:architectury:$versionConfig.common.architecturyApiVersionn"
    } else {
        modImplementation "dev.architectury:architectury:$versionConfig.common.architecturyApiVersion"
    }
    modImplementation("me.shedaniel.cloth:cloth-config-forge:$versionConfig.common.clothConfigVersion")
    if (rootProject.minecraft_version != "1.16.5") {
        compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
        implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
    }

    implementation(forgeRuntimeLibrary('org.apache.commons:commons-math3:3.6.1'))
    implementation(forgeRuntimeLibrary('org.apache.bcel:bcel:6.6.1')) {
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    implementation(forgeRuntimeLibrary("org.anarres:jcpp:1.4.14")) {
        transitive = false
    }
    implementation(forgeRuntimeLibrary("org.lwjgl:lwjgl-nanovg:$versionConfig.common.lwjglVersion"))
    for (var natives : lwjglNatives) {
        include(forgeRuntimeLibrary("org.lwjgl:lwjgl-nanovg::$natives"))
    }
    include("org.lwjgl:lwjgl-nanovg:$versionConfig.common.lwjglVersion")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
        filter { String line ->
            return line.replace('"{versionRange}"', '"' + versionConfig.common.forgeVersionRange + '"')
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}